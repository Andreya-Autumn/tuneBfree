.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.40.4.
.TH SETBFREE "1" "July 2012" "setBfree 0.5.1" "User Commands"
.SH NAME
setBfree \- DSP tonewheel organ
.SH SYNOPSIS
.B setBfree
[ \fIOPTIONS \fR] [ \fIproperty=value \fR... ]
.SH DESCRIPTION
setBfree \- DSP tonewheel organ
.PP
setBfree is a MIDI\-controlled, software synthesizer designed to imitate
the sound and properties of the electromechanical organs and sound
modification devices that brought world\-wide fame to the names and
products of Laurens Hammond and Don Leslie.
.SH OPTIONS
.TP
\fB\-c\fR <filename>, \fB\-\-config\fR <filename>
Load alternate config file over default
.TP
\fB\-C\fR, \fB\-\-noconfig\fR
Do not read the default configuration file
the equivalent built\-in defaults are still set
.TP
\fB\-d\fR, \fB\-\-dumpcc\fR
Print a list of MIDI\-CC mappings on startup
.TP
\fB\-h\fR
Print short help text
.TP
\fB\-H\fR, \fB\-\-help\fR
Print complete help text with parameter list
.TP
\fB\-p\fR <filename>, \fB\-\-program\fR <filename>
Load alternate program file over default
.TP
\fB\-P\fR, \fB\-\-noprogram\fR
Do not read the default program file
the built\-in programs are cleared as well
.TP
\fB\-r\fR, \fB\-\-randomize\fR
Randomize initial preset (whacky but true)
.TP
\fB\-V\fR, \fB\-\-version\fR
Print version information
.SS "General Information:"
.IP
The configuration is made up of two parts: program and config.
The static configuration of the properties of the instrument is defined in
a .cfg file. There is no need to specify a config\-file, as all configurable
parameters have built\-in default values. They can be overridden on startup
using 'property=value' pairs or by loading a specific .cfg file.
As the name /static/ implies, the properties can only be set on application
start. Yet many of the properties merely define the initial value of
settings which can later be modified during playback.
.IP
Properties are modified by sending MIDI Control\-Commands (CC) to the synth.
The mapping of CC commands to an action can be modified my setting the
"midi.controller.{upper|lower|pedal}.<CC>=<function>" property.
function\-names are equivalent to property\-names.
.IP
The program basically defines 'shortcuts'. Loading a program is usually
equivalent to sending a series of CC. Programs are commonly used to define
instruments (e.g. draw\-bar settings to mimic a flute) or provide scalepoints (e.g. reverb=64).  There are a few special commands which are
only available by recalling a program (e.g. randomize settings).
Programs are defined in a .pgm file and are fixed after starting
the application.
.PP
Default config: "/usr/share/setBfree/cfg/default.cfg"
Default program: "/usr/share/setBfree/pgm/default.pgm"
.SS "Parameters:"
.IP
List of available property\-value pairs. The type identifiers are:
\&'T': Text, 'I': integer, 'F': float, 'D': double\-precision float.
Properties marked with an asterisk (*), are available as MIDI CC
functions. When used as CC, the range 0\-127 is mapped to the values.
.SS "Parameters for 'Main':"
.TP
midi.driver
S  (jack)
.IP
The midi driver to use, 'jack' or 'alsa'
.TP
midi.port
S  ("")
.IP
The midi port(s) to auto\-connect to. With alsa it's a single port\-name or number, jack accepts regular expressions.
.TP
jack.connect
S  (system:playback_)
.IP
Auto connect both audio\-ports to a given regular\-expression. This setting is ignored if either of jack.out.[left|right] is specified.
.TP
jack.out.left
S  ("")
.IP
Connect left\-output to this jack\-port (exact name)
.TP
jack.out.right
S  ("")
.IP
Connect right\-output to this jack\-port (exact name)
.SS "Parameters for 'MIDI Parser':"
.TP
midi.upper.channel
I  (1)
.IP
The MIDI channel to use for the upper\-manual. range: [1..16]
.TP
midi.lower.channel
I  (2)
.IP
The MIDI channel to use for the lower manual. range: [1..16]
.TP
midi.pedals.channel
I  (3)
.IP
The MIDI channel to use for the pedals. range: [1..16]
.TP
midi.transpose
I  (0)
.TP
midi.upper.transpose
I  (0)
.TP
midi.lower.transpose
I  (0)
.TP
midi.pedals.transpose
I  (0)
.TP
midi.pedals.transpose.split
I  (0)
.TP
midi.lower.transpose.split
I  (0)
.TP
midi.upper.transpose.split
I  (0)
.TP
midi.controller.upper.<cc>
S  (\-)
.IP
Speficy function\-name to bind to MIDI control\-command. <cc> is an integer 0..127. Defaults are in midiPrimeControllerMapping() and can be listed using the '\-d' commandline option.
.TP
midi.controller.lower.<cc>
S  (\-)
.IP
see midi.controller.upper
.TP
midi.controller.pedals.<cc>
S  (\-)
.IP
see midi.controller.upper
.SS "Parameters for 'MIDI Program Parser':"
.TP
pgm.controller.offset
I  (1)
.IP
Compensate for MIDI controllers that number the programs from 1 to 128. Internally we use 0\-127, as does MIDI. range: [0,1]
.SS "Parameters for 'Tone Generator':"
.TP
osc.tuning
D  (440.0)
.IP
range: [220..880]
.TP
osc.temperament
S  ("gear60")
.IP
one of: "equal", "gear60", "gear50"
.TP
osc.x\-precision
D  (0.001)
.TP
osc.perc.fast
D  (1.0)
.IP
Fast Decay (seconds)
.TP
osc.perc.slow
D  (4.0)
.IP
Slow Decay (seconds)
.TP
osc.perc.normal
D  (1.0)
.IP
Sets the percussion starting gain of the envelope for normal volume; range [0..1]
.TP
osc.perc.soft
D  (0.5012)
.IP
Sets the percussion starting gain of the envelope for soft volume. range [0..1[ (less than 1.0)
.TP
osc.perc.gain
D  (11.0)
.IP
Sets the percussion gain scaling factor
.TP
osc.perc.bus.a
I  (3)
.IP
range [0..8]
.TP
osc.perc.bus.b
I  (4)
.IP
range [0..8]
.TP
osc.perc.bus.trig
I  (8)
.IP
range [\-1..8]
.TP
osc.eq.macro
S  ("chspline")
.IP
one of "chspline", "peak24", "peak46"
.TP
osc.eq.p1y
D  (1.0)
.IP
EQ spline parameter
.TP
osc.eq.r1y
D  (0.0)
.IP
EQ spline parameter
.TP
osc.eq.p4y
D  (1.0)
.IP
EQ spline parameter
.TP
osc.eq.r4y
D  (0.0)
.IP
EQ spline parameter
.TP
osc.eqv.ceiling
D  (1.0)
.IP
Normalize EQ parameters.
.TP
osc.eqv.<oscnum>
D  (\-)
.IP
oscnum=[0..127], value: [0..osc.eqv.ceiling]; default values are calculated depending on selected osc.eq.macro and tone\-generator\-model.
.TP
osc.harmonic.<h>
D  (\-)
.IP
speficy level of given harmonic number.
.TP
osc.harmonic.w<w>.f<h>
D  (\-)
.IP
w: number of wheel [0..91], h: harmonic number
.TP
osc.terminal.t<t>.w<w>
D  (\-)
.IP
t,w: wheel\-number [0..91]
.TP
osc.taper.k<key>.b<bus>.t<wheel>
D  (\-)
.TP
osc.crosstalk.k<key>
S  (\-)
.IP
value colon\-separated: "<int:bus>:<int:wheel>:<double:level>"
.TP
osc.compartment\-crosstalk
D  (0.01)
.IP
crosstalk between tonewheels in the same compartment. The value refers to the amount of rogue signal picked up; range: [0..1]
.TP
osc.transformer\-crosstalk
D  (0)
.IP
crosstalk between transformers on the top of the tg; range: [0..1]
.TP
osc.terminalstrip\-crosstalk
D  (0.01)
.IP
crosstalk between connection on the terminal strip; range: [0..1]
.TP
osc.wiring\-crosstalk
D  (0.01)
.IP
throttle on the crosstalk distribution model for wiring; range: [0..1]
.TP
osc.contribution\-floor
D  (0.0000158)
.IP
Signals weaker than this are not put on the contribution list; range: [0..1]
.TP
osc.contribution\-min
D  (0)
.IP
If non\-zero, signals that are placed on the contribution have at least this level; range: [0..1]
.TP
osc.attack.click.level
D  (0.5)
.IP
range: [0..1]
.TP
osc.attack.click.maxlength
D  (0.6250)
.IP
range: [0..1]. 1.0 corresponds to BUFFER_SIZE_SAMPLES audio\-samples
.TP
osc.attack.click.minlength
D  (0.1250)
.IP
range: [0..1]. 1.0 corresponds to BUFFER_SIZE_SAMPLES audio\-samples
.TP
osc.release.click.level
D  (0.25)
.IP
range: [0..1]
.TP
osc.release.model
S  ("linear")
.IP
one of "click", "cosine", "linear", "shelf"
.TP
osc.attack.model
S  ("click")
.IP
one of "click", "cosine", "linear", "shelf"
.SS "Parameters for 'Vibrato Effect':"
.TP
scanner.hz
D  (7.25)
.IP
range: [4..22]
.TP
scanner.modulation.v1
D  (3.0)
.IP
range: [0..12]
.TP
scanner.modulation.v2
D  (6.0)
.IP
range: [0..12]
.TP
scanner.modulation.v3
D  (9.0)
.IP
range: [0..12]
.SS "Parameters for 'Preamp/Overdrive Effect':"
.TP
overdrive.inputgain
F* (0.3567)
.IP
This is how much the input signal is scaled as it enters the overdrive effect. The default value is quite hot, but you can of course try it in anyway you like; range [0..1]
.TP
overdrive.outputgain
F* (0.07873)
.IP
This is how much the signal is scaled as it leaves the overdrive effect. Essentially this value should be as high as possible without clipping (and you *will* notice when it does \- Test with a bass\-chord on 88 8888 000 with percussion enabled and full swell, but do turn down the amplifier/headphone volume first!); range [0..1]
.TP
xov.ctl_biased
F* (0.5347)
.IP
bias base; range [0..1]
.TP
xov.ctl_biased_gfb
F* (0.6214)
.IP
Global [negative] feedback control; range [0..1]
.TP
overdrive.character
F* (\-)
.IP
Abstraction to set xov.ctl_biased_fb and xov.ctl_biased_fb2
.TP
xov.ctl_biased_fb
F* (0.5821)
.IP
This parameter behaves somewhat like an analogue tone control for bass mounted before the overdrive stage. Unity is somewhere around he value 0.6, lesser values takes away bass and lowers the volume while higher values gives more bass and more signal into the overdrive. Must be less than 1.0.
.TP
xov.ctl_biased_fb2
F* (0.999)
.IP
The fb2 parameter has the same function as fb1 but controls the signal after the overdrive stage. Together the two parameters are useful in that they can reduce the amount of bass going into the overdrive and then recover it on the other side. Must be less than 1.0.
.TP
xov.ctl_sagtobias
F* (0.1880)
.IP
This parameter is part of an attempt to recreate an artefact called 'power sag'. When a power amplifier is under heavy load the voltage drops and alters the operating parameters of the unit, usually towards more and other kinds of distortion. The sagfb parameter controls the rate of recovery from the sag effect when the load is lifted. Must be less than 1.0.
.SS "Parameters for 'Leslie Cabinet Effect':"
.TP
whirl.bypass
I  (0)
.IP
if set to 1, completely bypass leslie emulation
.TP
rotary.speed\-preset
I* (0)
.IP
horn and drum speed. 0:stopped, 1:slow, 2:fast
.TP
whirl.horn.slowrpm
D  (48.0)
.IP
RPM
.TP
whirl.horn.fastrpm
D  (400.0)
.IP
RPM
.TP
whirl.horn.acceleration
D  (350.0)
.IP
RPM/sec
.TP
whirl.horn.deceleration
D  (448.0)
.IP
RPM/sec
.TP
whirl.horn.breakpos
D* (0)
.IP
horn stop position 0: free, 0.0\-1.0 clockwise position where to stop. 1.0:front\-center
.TP
whirl.drum.slowrpm
D  (40.0)
.IP
RPM
.TP
whirl.drum.fastrpm
D  (342.0)
.IP
RPM
.TP
whirl.drum.acceleration
D  (120.0)
.IP
RPM/sec
.TP
whirl.drum.deceleration
D  (102.0)
.IP
RPM/sec
.TP
whirl.drum.breakpos
D* (0)
.IP
drum stop position 0: free, 0.0\-1.0 clockwise position where to stop. 1.0:front\-center
.TP
whirl.horn.radius
D  (19.2)
.IP
in centimeter.
.TP
whirl.drum.radius
D  (22.0)
.IP
in centimeter.
.TP
whirl.mic.distance
D  (42.0)
.IP
distance from mic to origin in centimeters.
.TP
whirl.horn.level
D  (0.7)
.IP
horn wet\-signal volume
.TP
whirl.horn.leak
D  (0.15)
.IP
horh dry\-signal leak
.TP
whirl.drum.filter.type
I* (8)
.IP
Filter type: 0\-8. see "Filter types" below
.TP
whirl.drum.filter.q
D* (1.6016)
.TP
whirl.drum.filter.hz
D* (811.9695)
.TP
whirl.drum.filter.gain
D* (\fB\-38\fR.9291)
.TP
whirl.horn.filter.a.type
I* (0)
.TP
whirl.horn.filter.a.hz
D* (4500)
.IP
Filter frequency; range: [250..8000]
.TP
whirl.horn.filter.a.q
D* (2.7456)
.IP
Filter Quality; range: [0.01..6.0]
.TP
whirl.horn.filter.a.gain
D* (\fB\-30\fR.0)
.IP
range: [\-48.0..48.0]
.TP
whirl.horn.filter.b.type
I* (7)
.TP
whirl.horn.filter.b.hz
D* (300.0)
.TP
whirl.horn.filter.b.q
D* (1.0)
.TP
whirl.horn.filter.b.gain
D* (\fB\-30\fR.0)
.TP
whirl.horn.comb.a.feedback
D  (\fB\-0\fR.55)
.TP
whirl.horn.comb.a.delay
I  (38)
.TP
whirl.horn.comb.b.feedback
D  (\fB\-0\fR.3508)
.TP
whirl.horn.comb.b.delay
D  (120)
.SS "Parameters for 'Reverb Effect':"
.TP
reverb.wet
D  (0.3)
.IP
Wet signal level; range [0..1]
.TP
reverb.dry
D  (0.7)
.IP
Dry signal level; range [0..1]
.TP
reverb.inputgain
D  (0.025)
.IP
Input Gain; range [0..1]
.TP
reverb.outputgain
D  (1.0)
.IP
Note: modifies dry/wet.
.TP
reverb.mix
D  (0.3)
.IP
Note: modifies dry/wet.
.SS "Parameters for 'Convolution Reverb Effect':"
.TP
convolution.mix
D* (1.0)
.IP
Note: modifies dry/wet. [0..1]
.TP
convolution.ir.file
S  (/usr/share/setBfree/ir/ir_leslie\-%04d.wav)
.IP
convolution sample filename
.TP
convolution.ir.channel.<int>
I  (1)
.TP
convolution.ir.gain.<int>
D  (0.04)
.TP
convolution.ir.delay.<int>
I  (0)
.SS "Filter Types (for Leslie):"
.TP
0
LPF low\-pass
.TP
1
HPF high\-pass
.TP
2
BF0 band\-pass 0
.TP
3
BF1 band\-pass 1
.TP
4
NOT notch
.TP
5
APF all\-pass
.TP
6
PEQ peaking eq
.TP
7
LSH low shelf
.TP
8
HSH high shelf
.PP
Note that the gain parameter does not apply to type 0 Low\-Pass\-Filters.
.SS "Additional MIDI Control-Command Functions:"
.IP
Note: the range is always 0..127 (MIDI value) and mapped to the available values.
.TP
{upper|lower|pedal}.drawbar<NUM>
I* (\-)
.IP
where <NUM> is [16, 513, 8, 4, 223, 2, 135 , 113, 1]
Set drawbar overtone volume [0..8].
The range is inversely mapped to the position of the drawbar, so that fader\-like controllers work in reverse, like real drawbars. Also note that the controller values are quantized into 0, ... 8 to correspond to the nine discrete positions of the original drawbar system:
0:8 (loudest), 1\-15:7, 16\-31:6,  32\-47:5, 48\-63:4, 64\-79:3, 80\-92:2, 96\-110:1, 111\-127:0(off)
.TP
rotary.speed\-preset
I* (\-)
.IP
set horn and drum speed; 0\-stop, 1:slow, 2:fast
.TP
rotary.speed\-toggle
I* (\-)
.IP
toggle rotary.speed\-preset between 1/2
.TP
rotary.speed\-select
I* (\-)
.TP
low\-level access function 0..8:
3^2 combinations) [stop/slow/fast]^[horn|drum]
.TP
swellpedal1
D* (0.7)
.IP
set swell pedal gain
.TP
swellpedal2
D* (0.7)
.IP
identical to swellpedal1
.TP
vibrato.knob
I* (0)
.IP
<22:vibrato1, <44:chorus1, <66:vibrato2, <88:chorus2, <110vibrato3, >=110:chorus3
.TP
vibrato.routing
I* (0)
.IP
<32:off, <64:lower, <96:upper, >=96:both
.TP
percussion.enable
I* (0)
.IP
<16:off, <63:normal, <112:soft, >=112:off
.TP
percussion.decay
I* (0)
.IP
<64: fast\-decay, >=64 slow decay
.TP
percussion.harmonic
I* (0)
.IP
<64: third harmonic, >=64 second harmonic
.SH EXAMPLES
setBfree
setBfree \fB\-p\fR pgm/default.pgm midi.port="a2j:[AV]" midi.driver="jack"
setBfree midi.port="129" midi.driver="alsa" jack.connect="jack_rack:in_"
setBfree jack.out.left="system:playback_7" jack.out.right="system:playback_8"
.SH "REPORTING BUGS"
Report bugs at <http://github.com/pantherb/setBfree/issues>.
.br
Website and manual: <http://setbfree.org>
.SH COPYRIGHT
Copyright \(co 2003\-2004 Fredrik Kilander <fk@dsv.su.se>
.br
Copyright \(co 2008\-2012 Robin Gareus <robin@gareus.org>
.br
Copyright \(co 2010 Ken Restivo <ken@restivo.org>
.br
Copyright \(co 2012 Will Panther <pantherb@setbfree.org>
.PP
.br
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
